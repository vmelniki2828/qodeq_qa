import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Calendar } from './Calendar';
import './QAAnalytics.css';
import {
  ActiveFilters,
  ActiveFiltersLabel,
  ActiveFiltersList,
  ActiveFilterItem,
  ActiveFilterText,
  RemoveFilterBtn,
  FiltersTriggerBtn,
  FilterIcon,
  SlideoutFilters,
  SlideoutContent,
  SlideoutHeader,
  CloseFiltersBtn,
  DateFiltersRow,
  FilterGroup,
  FilterLabel,
  FilterActions,
  ApplyFiltersBtn,
  ClearFiltersBtn
} from '../styles/QAChats.styled';

export const QAAnalytics = () => {
  const navigate = useNavigate();
  const [statisticsData, setStatisticsData] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState('');
  const [filters, setFilters] = useState({
    createdFrom: '',
    createdTo: ''
  });
  const [isFiltersOpen, setIsFiltersOpen] = useState(false);
  const [openCalendar, setOpenCalendar] = useState(null);

  useEffect(() => {
    const fetchStatistics = async () => {
      try {
        setIsLoading(true);
        setError('');

        // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–∞—Ç
        let url = 'http://185.138.164.88/api/v1/chat/statistics/?checked=true';
        
        if (filters.createdFrom) {
          url += `&date_start=${filters.createdFrom}`;
        }
        
        if (filters.createdTo) {
          url += `&date_end=${filters.createdTo}`;
        }

        const response = await fetch(url, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          },
        });

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        setStatisticsData(data);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', err);
        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
      } finally {
        setIsLoading(false);
      }
    };

    fetchStatistics();
  }, [filters.createdFrom, filters.createdTo]);

  const handleOperatorClick = (agentId) => {
    navigate(`/agent/${agentId}`);
  };

  const handleFilterChange = (filterName, value) => {
    setFilters(prev => ({
      ...prev,
      [filterName]: value
    }));
  };

  const clearFilters = () => {
    setFilters({
      createdFrom: '',
      createdTo: ''
    });
  };

  const handleCalendarOpen = (calendarType) => {
    setOpenCalendar(calendarType);
  };

  const handleCalendarClose = () => {
    setOpenCalendar(null);
  };

  const applyFilters = () => {
    // –§–∏–ª—å—Ç—Ä—ã –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ useEffect –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ filters.createdFrom –∏ filters.createdTo
    setIsFiltersOpen(false);
  };

  if (isLoading) {
    return (
      <div className="page-content">
        <div className="qa-analytics">
          <div className="loading-container">
            <div className="loading-spinner"></div>
            <p className="loading-text">–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...</p>
          </div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="page-content">
        <div className="qa-analytics">
          <div className="error-container">
            <div className="error-message">
              <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
              <p>{error}</p>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const hasData = statisticsData && (
    statisticsData.agents?.length > 0 ||
    statisticsData.aggregate?.count_chats > 0 ||
    statisticsData.aggregate?.average_score > 0 ||
    statisticsData.aggregate?.count_errors > 0 ||
    statisticsData.aggregate?.top_questions?.length > 0 ||
    statisticsData.aggregate?.top_tags?.length > 0
  );

  if (!hasData) {
    return (
      <div className="page-content">
        <div className="qa-analytics">
          <div className="analytics-header">
            <h1 className="analytics-title">–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</h1>
            <p className="analytics-subtitle">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∞—Ç–∞–º –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º</p>
            
            <div className="filters-section">
              {Object.values(filters).filter(value => value !== '').length > 0 && (
                <ActiveFilters>
                  <ActiveFiltersLabel>–ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:</ActiveFiltersLabel>
                  <ActiveFiltersList>
                    {filters.createdFrom && (
                      <ActiveFilterItem>
                        <ActiveFilterText>–û—Ç: {filters.createdFrom}</ActiveFilterText>
                        <RemoveFilterBtn onClick={() => handleFilterChange('createdFrom', '')}>√ó</RemoveFilterBtn>
                      </ActiveFilterItem>
                    )}
                    {filters.createdTo && (
                      <ActiveFilterItem>
                        <ActiveFilterText>–î–æ: {filters.createdTo}</ActiveFilterText>
                        <RemoveFilterBtn onClick={() => handleFilterChange('createdTo', '')}>√ó</RemoveFilterBtn>
                      </ActiveFilterItem>
                    )}
                  </ActiveFiltersList>
                </ActiveFilters>
              )}
            </div>
            
            <FiltersTriggerBtn onClick={() => setIsFiltersOpen(!isFiltersOpen)}>
              <FilterIcon>üîç</FilterIcon>
            </FiltersTriggerBtn>
            
            <SlideoutFilters isOpen={isFiltersOpen}>
              <SlideoutContent>
                <SlideoutHeader>
                  <h3>Filters</h3>
                  <CloseFiltersBtn onClick={() => setIsFiltersOpen(false)}>√ó</CloseFiltersBtn>
                </SlideoutHeader>
                
                <DateFiltersRow>
                  <FilterGroup>
                    <FilterLabel>–û—Ç:</FilterLabel>
                    <Calendar
                      value={filters.createdFrom}
                      onChange={(value) => handleFilterChange('createdFrom', value)}
                      placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É"
                      isOpen={openCalendar === 'createdFrom'}
                      onOpen={() => handleCalendarOpen('createdFrom')}
                      onClose={handleCalendarClose}
                      minDate={new Date(new Date().getFullYear(), new Date().getMonth() - 1, 1)}
                      maxDate={new Date(new Date().getFullYear(), new Date().getMonth() + 1, 0)}
                    />
                  </FilterGroup>
                  
                  <FilterGroup>
                    <FilterLabel>–î–æ:</FilterLabel>
                    <Calendar
                      value={filters.createdTo}
                      onChange={(value) => handleFilterChange('createdTo', value)}
                      placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É"
                      isOpen={openCalendar === 'createdTo'}
                      onOpen={() => handleCalendarOpen('createdTo')}
                      onClose={handleCalendarClose}
                      minDate={new Date(new Date().getFullYear(), new Date().getMonth() - 1, 1)}
                      maxDate={new Date(new Date().getFullYear(), new Date().getMonth() + 1, 0)}
                    />
                  </FilterGroup>
                </DateFiltersRow>
                
                <FilterActions>
                  <ClearFiltersBtn onClick={clearFilters}>
                    –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ
                  </ClearFiltersBtn>
                  <ApplyFiltersBtn onClick={applyFilters}>
                    –ü—Ä–∏–º–µ–Ω–∏—Ç—å
                  </ApplyFiltersBtn>
                </FilterActions>
              </SlideoutContent>
            </SlideoutFilters>
          </div>
          
          <div className="no-data-container">
            <div className="no-data-message">
              <h2>–î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</h2>
              <p>–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="page-content">
      <div className="qa-analytics">
        <div className="analytics-header">
          <h1 className="analytics-title">–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</h1>
          <p className="analytics-subtitle">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é</p>
          
          {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
          {Object.values(filters).filter(value => value !== '').length > 0 && (
            <ActiveFilters>
              <ActiveFiltersLabel>–ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:</ActiveFiltersLabel>
              <ActiveFiltersList>
                {filters.createdFrom && (
                  <ActiveFilterItem>
                    <ActiveFilterText>–°: {new Date(filters.createdFrom).toLocaleDateString('ru-RU')}</ActiveFilterText>
                    <RemoveFilterBtn onClick={() => handleFilterChange('createdFrom', '')}>√ó</RemoveFilterBtn>
                  </ActiveFilterItem>
                )}
                {filters.createdTo && (
                  <ActiveFilterItem>
                    <ActiveFilterText>–ü–æ: {new Date(filters.createdTo).toLocaleDateString('ru-RU')}</ActiveFilterText>
                    <RemoveFilterBtn onClick={() => handleFilterChange('createdTo', '')}>√ó</RemoveFilterBtn>
                  </ActiveFilterItem>
                )}
              </ActiveFiltersList>
            </ActiveFilters>
          )}
        </div>
        
        <FiltersTriggerBtn onClick={() => setIsFiltersOpen(!isFiltersOpen)}>
          <FilterIcon>üîç</FilterIcon>
        </FiltersTriggerBtn>
        
        <SlideoutFilters isOpen={isFiltersOpen}>
          <SlideoutContent>
            <SlideoutHeader>
              <h3>Filters</h3>
              <CloseFiltersBtn onClick={() => setIsFiltersOpen(false)}>
                √ó
              </CloseFiltersBtn>
            </SlideoutHeader>
            
            <div className="slideout-body">
              <DateFiltersRow>
                <FilterGroup>
                  <FilterLabel>–û—Ç:</FilterLabel>
                  <Calendar
                    value={filters.createdFrom}
                    onChange={(value) => handleFilterChange('createdFrom', value)}
                    placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É"
                    isOpen={openCalendar === 'createdFrom'}
                    onOpen={() => handleCalendarOpen('createdFrom')}
                    onClose={handleCalendarClose}
                    minDate={new Date(new Date().getFullYear(), new Date().getMonth() - 1, 1)}
                    maxDate={new Date(new Date().getFullYear(), new Date().getMonth() + 1, 0)}
                  />
                </FilterGroup>

                <FilterGroup>
                  <FilterLabel>–î–æ:</FilterLabel>
                  <Calendar
                    value={filters.createdTo}
                    onChange={(value) => handleFilterChange('createdTo', value)}
                    placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É"
                    isOpen={openCalendar === 'createdTo'}
                    onOpen={() => handleCalendarOpen('createdTo')}
                    onClose={handleCalendarClose}
                    minDate={new Date(new Date().getFullYear(), new Date().getMonth() - 1, 1)}
                    maxDate={new Date(new Date().getFullYear(), new Date().getMonth() + 1, 0)}
                  />
                </FilterGroup>
              </DateFiltersRow>
            </div>

            <FilterActions>
              <ClearFiltersBtn onClick={clearFilters}>
                –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ
              </ClearFiltersBtn>
              <ApplyFiltersBtn onClick={applyFilters}>
                –ü—Ä–∏–º–µ–Ω–∏—Ç—å
              </ApplyFiltersBtn>
            </FilterActions>
          </SlideoutContent>
        </SlideoutFilters>
        
        <div className="analytics-grid">
          {/* –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
          <div className="stats-section">
            <h2 className="section-title">–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
            <div className="stats-grid">
              <div className="stat-card">
                <div className="stat-icon">üí¨</div>
                <div className="stat-content">
                  <div className="stat-value">{statisticsData?.aggregate?.count_chats || 0}</div>
                  <div className="stat-label">–í—Å–µ–≥–æ —á–∞—Ç–æ–≤</div>
                  <div className="stat-footer">Template</div>
                </div>
              </div>
              <div className="stat-card">
                <div className="stat-icon">‚≠ê</div>
                <div className="stat-content">
                  <div className="stat-value">{statisticsData?.aggregate?.average_score?.toFixed(1) || 0}</div>
                  <div className="stat-label">–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª</div>
                  <div className="stat-footer">Template</div>
                </div>
              </div>
              <div className="stat-card">
                <div className="stat-icon">‚ö†Ô∏è</div>
                <div className="stat-content">
                  <div className="stat-value">{statisticsData?.aggregate?.count_errors || 0}</div>
                  <div className="stat-label">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫</div>
                  <div className="stat-footer">Template</div>
                </div>
              </div>
            </div>
          </div>

          {/* –û–ø–µ—Ä–∞—Ç–æ—Ä—ã */}
          {statisticsData?.agents && statisticsData.agents.length > 0 && (
            <div className="operators-section">
              <h2 className="section-title">–û–ø–µ—Ä–∞—Ç–æ—Ä—ã</h2>
              <div className="operators-list">
                {statisticsData.agents.map((agent, index) => (
                  <div 
                    key={agent.agents_id || index} 
                    className="operator-item"
                    onClick={() => handleOperatorClick(agent.agents_id)}
                    style={{ cursor: 'pointer' }}
                  >
                    <div className="operator-info">
                      <div className="operator-name">{agent.agents_name}</div>
                      <div className="operator-supervisor">{agent.head || '–ù–µ—Ç –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è'}</div>
                    </div>
                    <div className="operator-stats">
                      <div className="operator-stat">
                        <div className="operator-stat-value">{agent.total_chats || 0}</div>
                        <div className="operator-stat-label">–í—Å–µ–≥–æ —á–∞—Ç–æ–≤</div>
                      </div>
                      <div className="operator-stat">
                        <div className="operator-stat-value">{agent.total_checked || 0}</div>
                        <div className="operator-stat-label">–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ</div>
                      </div>
                      <div className="operator-stat">
                        <div className="operator-stat-value">{agent.grade || 0}</div>
                        <div className="operator-stat-label">–ë–∞–ª–ª</div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* –¢–æ–ø –≤–æ–ø—Ä–æ—Å–æ–≤ */}
          {statisticsData?.aggregate?.top_questions && statisticsData.aggregate.top_questions.length > 0 && (
            <div className="questions-section">
              <h2 className="section-title">–¢–æ–ø –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –Ω–∞—Ä—É—à–µ–Ω–∏—è–º–∏</h2>
              <div className="questions-list">
                {statisticsData.aggregate.top_questions.map((question, index) => (
                  <div key={question.id || index} className="question-item">
                    <div className="question-number">{index + 1}</div>
                    <div className="question-text">{question.text}</div>
                    <div className="question-violations">{question.violations} –Ω–∞—Ä—É—à–µ–Ω–∏–π</div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* –¢–æ–ø —Ç–µ–≥–æ–≤ */}
          {statisticsData?.aggregate?.top_tags && statisticsData.aggregate.top_tags.length > 0 && (
            <div className="tags-section">
              <h2 className="section-title">–¢–æ–ø —Ç–µ–≥–æ–≤</h2>
              <div className="tags-list">
                {statisticsData.aggregate.top_tags.map((tag, index) => (
                  <div key={index} className="tag-item">
                    <div className="tag-name" style={{ color: tag.color }}>
                      {tag.tag}
                    </div>
                    <div className="tag-count">{tag.count}</div>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};
